#include <Wire.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <RTClib.h>
#include "dht.h"
#include <MQ2.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

//Definition Digital Pin
#define pinButton1 2
#define pinButton2 3
#define pinLedReceivedData 4
#define pinLedRed 5
#define pinLedGreen 6
#define pin_radio_CE 7
#define pin_radio_CSN 8
#define pinSensorDTH22 9
#define pinBuzzer 10
#define pinButtonOledReset 14 //A0
#define pinDigitalSensorMq2 15 //A1

//Definition Analog Pin
#define pinSensorMq2 A2

RF24 radio(pin_radio_CE, pin_radio_CSN);
Adafruit_SSD1306 screen(128, 64, &Wire, pinButtonOledReset);
RTC_DS3231 dateTime;
dht DHT;
MQ2 mq2(pinSensorMq2);
DateTime now;

const byte addresses [] [6] = {"00001", "00002"};

//strure of data
struct Weather_Station {
  int temperatureOutdoor;
  int humidityOutdoor;
  int rainIntensity;
  int intensityLightOutdoor;
  int uvIndexOutdoor;
  int pressureAtmoOutdoor;
  int altitudeOutdoor;
  int airQualityOutdoor;
  int windDirectionOutdoor;
  int windSpeedOutdoor;
};
Weather_Station data; //Create a variable with the above structure

const char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
const char monthOfTheYear[12][3] = {"Jan", "Fev", "Mar", "Avr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};

const int windValueDirection [8] = {753, 79, 253, 931, 418, 160, 589, 866};
const String windDirection [8] = {"N", "E", "S", "W", "NE", "SE", "SW", "NW"};

int readDHT22, temperatureIndoor, humidityIndoor, temperatureOutdoor, humidityOutdoor, rainIntensity, intensityLightOutdoor, uvIndexOutdoor, airQualityOutdoor, pressureAtmoOutdoor, windDirectionOutdoor, windSpeedOutdoor;
String inTemp, inHum, inGas, outTemp, outHum, outRain, outLight, outUv, outPressure, outAir, outWindDir, outWindSpeed;
int lpg, co, smoke;
char drawState = 'I';
int buttonPress = 0;
unsigned long previousMillis = 0;
long interval = 3000;

//taille Bitmap
const int sizeBitmap = 40;
const int sizeBitmapMini = 40;

//difinition image bitmap temperature
static const unsigned char temperatureBitmap [] PROGMEM = {
  0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x00, 0x00, 0x00,
  0x06, 0x06, 0x3c, 0x00, 0x00, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x0c, 0x46, 0x00, 0x00, 0x00, 0x0c,
  0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x78, 0x00, 0x00, 0x0c, 0x66,
  0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x18,
  0x00, 0x00, 0x0c, 0x66, 0x7e, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00,
  0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x78, 0x00, 0x00, 0x0c, 0x66, 0x78, 0x00, 0x00,
  0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c,
  0x66, 0x7c, 0x00, 0x00, 0x0c, 0x66, 0x3c, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x1c, 0x63,
  0x00, 0x00, 0x00, 0x18, 0x61, 0x80, 0x00, 0x00, 0x30, 0xe0, 0x80, 0x00, 0x00, 0x21, 0xf0, 0xc0,
  0x00, 0x00, 0x63, 0xf8, 0xc0, 0x00, 0x00, 0x63, 0xf8, 0x40, 0x00, 0x00, 0x63, 0xf8, 0x40, 0x00,
  0x00, 0x63, 0xf8, 0x40, 0x00, 0x00, 0x63, 0xf8, 0xc0, 0x00, 0x00, 0x21, 0xf0, 0xc0, 0x00, 0x00,
  0x30, 0x01, 0x80, 0x00, 0x00, 0x18, 0x03, 0x80, 0x00, 0x00, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x9e, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00
};

//difinition image bitmap humidité
static const unsigned char humidityBitmap [] PROGMEM = {
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x20,
  0xc3, 0x00, 0x00, 0x00, 0x70, 0x83, 0x00, 0x00, 0x00, 0x79, 0x81, 0x00, 0x00, 0x00, 0xd9, 0x01,
  0x80, 0x00, 0x00, 0x8f, 0x00, 0x80, 0x00, 0x01, 0x87, 0x00, 0xc0, 0x00, 0x01, 0x06, 0x00, 0x40,
  0x00, 0x03, 0x06, 0x00, 0x60, 0x00, 0x02, 0x04, 0x00, 0x20, 0x00, 0x06, 0x0c, 0x00, 0x30, 0x00,
  0x04, 0x08, 0x00, 0x18, 0x00, 0x0c, 0x18, 0x00, 0x18, 0x00, 0x0c, 0x10, 0x00, 0x0c, 0x00, 0x0c,
  0x30, 0x00, 0x04, 0x00, 0x0c, 0x20, 0x00, 0x04, 0x00, 0x04, 0x20, 0x00, 0x02, 0x00, 0x06, 0x60,
  0x00, 0x02, 0x00, 0x03, 0xc0, 0x00, 0x03, 0x00, 0x01, 0xc0, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00,
  0x01, 0x00, 0x00, 0xc0, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x80, 0x00, 0x80, 0x00, 0x09,
  0x80, 0x00, 0xc0, 0x00, 0x09, 0x00, 0x00, 0xc0, 0x00, 0x19, 0x00, 0x00, 0x40, 0x00, 0x33, 0x00,
  0x00, 0x40, 0x00, 0x62, 0x00, 0x00, 0x60, 0x00, 0xc6, 0x00, 0x00, 0x30, 0x00, 0x84, 0x00, 0x00,
  0x18, 0x00, 0x0c, 0x40, 0x00, 0x0c, 0x00, 0x38, 0x00, 0x00, 0x06, 0x00, 0x60, 0x00, 0x00, 0x03,
  0xc3, 0xc0, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00
};

//difinition image bitmap gas
static const unsigned char gasBitmap [] PROGMEM = {
  0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x03, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x3c, 0x40, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x02,
  0x24, 0x40, 0x00, 0x00, 0x03, 0xfe, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x38, 0x00,
  0x1c, 0x00, 0x00, 0x60, 0x00, 0x06, 0x00, 0x00, 0x40, 0x00, 0x02, 0x00, 0x00, 0xc0, 0x00, 0x03,
  0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x0c, 0x01, 0x00, 0x00, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x80, 0x14, 0x00, 0x00, 0x00,
  0x80, 0x22, 0x01, 0x00, 0x00, 0x80, 0xe3, 0x01, 0x00, 0x00, 0x81, 0x81, 0x01, 0x00, 0x00, 0x81,
  0x18, 0x81, 0x00, 0x00, 0x81, 0x1c, 0x81, 0x00, 0x00, 0x81, 0x74, 0x81, 0x00, 0x00, 0x81, 0xe7,
  0x81, 0x00, 0x00, 0x80, 0xe7, 0x01, 0x00, 0x00, 0x80, 0x7e, 0x01, 0x00, 0x00, 0x80, 0x18, 0x01,
  0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0xf1, 0xff, 0xff, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x40, 0x00, 0x02, 0x00, 0x00,
  0x3f, 0xff, 0xfc, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x10,
  0x00, 0x08, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00
};

//difinition image bitmap intensité pluie
static const unsigned char rainBitmap [] PROGMEM = {
  0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00,
  0x78, 0x1e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x03, 0xf8, 0x00, 0x01, 0xc0,
  0x03, 0xfe, 0x00, 0x01, 0xc0, 0x01, 0xff, 0x00, 0x01, 0xc0, 0x00, 0x07, 0x80, 0x03, 0xc0, 0x00,
  0x01, 0xc0, 0x0f, 0x80, 0x00, 0x01, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0xc0, 0x38, 0x00, 0x00, 0x00,
  0xe0, 0x70, 0x00, 0x00, 0x00, 0xf0, 0x70, 0x00, 0x00, 0x00, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x1e,
  0xe0, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xe0,
  0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x07, 0x70, 0x00, 0x00, 0x00, 0x07, 0x38, 0x00,
  0x00, 0x00, 0x0e, 0x3e, 0x00, 0x00, 0x00, 0x1e, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00,
  0x00, 0x1c, 0x03, 0x80, 0x70, 0x06, 0x38, 0x03, 0x00, 0x70, 0x0e, 0x38, 0x07, 0x00, 0x60, 0x0e,
  0x70, 0x06, 0x00, 0xe0, 0x1c, 0x71, 0x8e, 0x30, 0xc2, 0x18, 0x63, 0x8e, 0x31, 0xc7, 0x18, 0x03,
  0x80, 0x70, 0x06, 0x00, 0x07, 0x00, 0x60, 0x0e, 0x00, 0x07, 0x00, 0xe0, 0x1c, 0x00, 0x06, 0x00,
  0xe0, 0x1c, 0x00, 0x06, 0x00, 0xc0, 0x18, 0x00
};

//difinition image bitmap intensité light
static const unsigned char lightBitmap [] PROGMEM = {
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0xc0, 0x03, 0x80, 0x00, 0x01, 0xc0, 0x03, 0xc0, 0x00, 0x03, 0xc0, 0x01, 0xe0, 0x00,
  0x07, 0x80, 0x00, 0x40, 0x7e, 0x02, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xc0,
  0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x70, 0x00, 0x00, 0x1c, 0x00, 0x38, 0x00,
  0x00, 0x1c, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x00, 0x38, 0x00, 0x1c, 0x00, 0xfc,
  0x38, 0x00, 0x1c, 0x3f, 0xfc, 0x38, 0x00, 0x1c, 0x3f, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x00, 0x38,
  0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x38, 0x00, 0x00, 0x0e, 0x00,
  0x70, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0x80,
  0x00, 0x00, 0x40, 0x7e, 0x02, 0x00, 0x00, 0xe0, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x03, 0xc0,
  0x03, 0x80, 0x00, 0x01, 0xc0, 0x03, 0x80, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00
};

//difinition image bitmap indice UV
static const unsigned char uvBitmap [] PROGMEM = {
  0x3f, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0xe0, 0x00, 0x18, 0x00, 0x00, 0xc0,
  0x00, 0x08, 0x00, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0xc0, 0x00, 0x0c, 0x80, 0x00, 0xc0, 0x00,
  0x0d, 0x80, 0x00, 0xff, 0xff, 0x1c, 0x80, 0x00, 0xff, 0xff, 0x1c, 0x00, 0x00, 0xc0, 0x00, 0x0c,
  0xf8, 0x20, 0xc0, 0x00, 0x0c, 0x1e, 0x60, 0xc0, 0x00, 0x0c, 0x03, 0x00, 0xc0, 0x00, 0x0c, 0x01,
  0x80, 0xc0, 0x00, 0x0c, 0x00, 0xc0, 0xc0, 0x00, 0x0c, 0x00, 0xc0, 0xff, 0xff, 0xfc, 0x00, 0x60,
  0xff, 0xff, 0xfc, 0x00, 0x20, 0xc0, 0x00, 0x1c, 0x00, 0x60, 0xc0, 0x00, 0x3f, 0x35, 0xf0, 0xc0,
  0x03, 0xff, 0x35, 0xfe, 0xc0, 0x03, 0xff, 0x37, 0xbe, 0xc0, 0x00, 0x7f, 0xe7, 0x30, 0xc0, 0x00,
  0x1d, 0xe3, 0x20, 0xe0, 0x7f, 0xfc, 0x00, 0x20, 0xe6, 0x7f, 0xfc, 0x00, 0x60, 0xc0, 0x00, 0x0c,
  0x00, 0xc0, 0xc0, 0x00, 0x0c, 0x00, 0xc0, 0xc0, 0x00, 0x0c, 0x01, 0x80, 0xc0, 0x00, 0x0c, 0x03,
  0x00, 0xc0, 0x00, 0x0c, 0x1e, 0x60, 0xc0, 0x00, 0x0c, 0xf8, 0x20, 0xff, 0xff, 0x1c, 0x80, 0x00,
  0xff, 0xff, 0x1c, 0x80, 0x00, 0xc0, 0x00, 0x0d, 0x80, 0x00, 0xc0, 0x00, 0x0c, 0x80, 0x00, 0xc0,
  0x00, 0x0c, 0x00, 0x00, 0xc0, 0x00, 0x08, 0x00, 0x00, 0xe0, 0x00, 0x18, 0x00, 0x00, 0x7f, 0xff,
  0xf8, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00
};

//difinition image bitmap qualité aire
static const unsigned char airQaualityBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0xfe, 0x00, 0x00, 0x30, 0x1f, 0x83, 0x00, 0x00,
  0x60, 0x06, 0x00, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x20, 0x02, 0x07,
  0x3c, 0x00, 0x20, 0x02, 0x04, 0x24, 0x00, 0x20, 0x04, 0x0c, 0x66, 0x00, 0x20, 0x04, 0x04, 0x24,
  0xe0, 0x20, 0x0f, 0x04, 0x24, 0x20, 0xf0, 0x31, 0x83, 0x18, 0xe1, 0x8c, 0x60, 0xc0, 0x00, 0xc3,
  0x06, 0x40, 0x40, 0x00, 0xc2, 0x02, 0x40, 0x40, 0x3c, 0x22, 0x02, 0x40, 0x00, 0x66, 0x00, 0x02,
  0x40, 0x00, 0x81, 0x00, 0x02, 0x60, 0x01, 0x00, 0x80, 0x06, 0x30, 0x03, 0x18, 0xc0, 0x0c, 0x0f,
  0xfe, 0x3c, 0x7f, 0xf8, 0x00, 0x1c, 0x66, 0x38, 0x00, 0x00, 0x10, 0x81, 0x08, 0x00, 0x00, 0x21,
  0x18, 0x84, 0x00, 0x00, 0x63, 0x3c, 0xc6, 0x00, 0x00, 0xc6, 0x66, 0x63, 0x00, 0x01, 0x8c, 0xc3,
  0x31, 0x80, 0x02, 0x11, 0x98, 0x88, 0x40, 0x02, 0x21, 0x38, 0x84, 0x40, 0x03, 0x61, 0x38, 0x86,
  0xc0, 0x01, 0xc1, 0x1c, 0x83, 0x80, 0x00, 0x41, 0x1c, 0x82, 0x00, 0x00, 0x41, 0x18, 0x82, 0x00,
  0x00, 0x40, 0x99, 0x02, 0x00, 0x00, 0x60, 0xff, 0x06, 0x00, 0x00, 0x20, 0x3c, 0x04, 0x00, 0x00,
  0x20, 0x18, 0x04, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x30,
  0x00, 0x0c, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00
};

//difinition image bitmap pression atmospherique
static const unsigned char pressureAtmoBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00,
  0xe0, 0x60, 0x00, 0x00, 0x01, 0x80, 0x18, 0x00, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x00, 0x06, 0x00,
  0x06, 0x00, 0x00, 0x0c, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x01, 0x80, 0x00, 0x18, 0x00, 0x00,
  0xe0, 0x07, 0xf0, 0x00, 0x00, 0x10, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 0x04,
  0x60, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x02, 0x40,
  0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0xff, 0x00, 0x02, 0x40, 0x01, 0xff, 0x80, 0x02, 0x40, 0x03,
  0xff, 0xc0, 0x06, 0x60, 0x03, 0x83, 0xc0, 0x04, 0x30, 0x07, 0x00, 0xe0, 0x08, 0x18, 0x05, 0x18,
  0xa0, 0x30, 0x07, 0xfd, 0x18, 0xbf, 0xc0, 0x00, 0x7d, 0x18, 0xbe, 0x00, 0x00, 0x05, 0x18, 0xa0,
  0x00, 0x00, 0x07, 0x00, 0xe0, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x03, 0x80, 0xc0, 0x00,
  0x00, 0x01, 0x81, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//difinition image bitmap altitude
static const unsigned char altitudeBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x07, 0x78, 0x00, 0x00, 0x00, 0x06,
  0x38, 0x00, 0x00, 0x00, 0x07, 0x38, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x02, 0x03, 0xe0,
  0x00, 0x00, 0x07, 0x01, 0xc0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00,
  0x00, 0x1d, 0xc0, 0x00, 0x00, 0x00, 0x38, 0xe0, 0x04, 0x00, 0x00, 0x30, 0xe0, 0x0e, 0x00, 0x00,
  0x70, 0x70, 0x1e, 0x00, 0x00, 0xe2, 0x38, 0x3f, 0x00, 0x01, 0xe7, 0x38, 0x3b, 0x80, 0x01, 0xff,
  0xfc, 0x7b, 0x80, 0x03, 0xff, 0xfe, 0x7b, 0xc0, 0x07, 0xbf, 0xef, 0xff, 0xe0, 0x07, 0x3d, 0xe7,
  0xff, 0xe0, 0x0e, 0x18, 0xc3, 0x8e, 0x70, 0x0c, 0x00, 0x03, 0x84, 0x30, 0x1c, 0x00, 0x01, 0xc0,
  0x38, 0x38, 0x00, 0x00, 0xe0, 0x1c, 0x70, 0x00, 0x00, 0xe0, 0x0e, 0x70, 0x00, 0x00, 0x70, 0x0e,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//difinition image bitmap altitude
static const unsigned char windBitmap [] PROGMEM = {
  0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x01, 0x87, 0x9f, 0xc0, 0x00, 0x01,
  0x87, 0x0f, 0xf8, 0x00, 0x01, 0x8f, 0x0c, 0x3f, 0xc0, 0x01, 0x9d, 0x0c, 0x31, 0xfc, 0x03, 0xf9,
  0x0c, 0x30, 0xce, 0x03, 0xf1, 0x0c, 0x30, 0xc6, 0x06, 0x61, 0x0c, 0x30, 0xc3, 0x06, 0x41, 0x0c,
  0x30, 0xc3, 0x06, 0x41, 0x0c, 0x30, 0xc3, 0x06, 0x61, 0x0c, 0x30, 0xc3, 0x07, 0x61, 0x0c, 0x30,
  0xc3, 0x03, 0xf1, 0x0c, 0x30, 0xc6, 0x03, 0xf9, 0x0c, 0x30, 0xde, 0x01, 0x9d, 0x0c, 0x31, 0xf8,
  0x01, 0x8f, 0x0c, 0x3f, 0x80, 0x01, 0x87, 0x0f, 0xfc, 0x00, 0x01, 0x87, 0x1f, 0xc0, 0x00, 0x01,
  0x83, 0xfc, 0x00, 0x00, 0x01, 0x81, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0xc0, 0x00, 0x01, 0x80,
  0x01, 0xe0, 0x00, 0x01, 0x80, 0x01, 0x30, 0x00, 0x01, 0x80, 0x00, 0x30, 0x00, 0x01, 0x80, 0xff,
  0xe0, 0x00, 0x01, 0x81, 0xff, 0xc0, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x3f,
  0xc0, 0x01, 0x80, 0x00, 0x7f, 0xe0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0x80, 0x0f, 0xfe, 0x00,
  0x01, 0x80, 0x0f, 0xff, 0x00, 0x03, 0xc0, 0x00, 0x03, 0x00, 0x07, 0x40, 0x00, 0x01, 0x00, 0x06,
  0x60, 0x00, 0x1f, 0x00, 0x04, 0x60, 0x00, 0x0e, 0x00, 0x04, 0x60, 0x00, 0x00, 0x00, 0x3f, 0xff,
  0x80, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00
};



void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);

  Wire.begin();

  pinMode(pinButton1, INPUT);
  pinMode(pinButton2, INPUT);
  pinMode(pinLedReceivedData, OUTPUT);
  pinMode(pinLedRed, OUTPUT);
  pinMode(pinLedGreen, OUTPUT);
  pinMode(pinSensorDTH22, INPUT);
  pinMode(pinBuzzer, OUTPUT);
  pinMode(pinDigitalSensorMq2, INPUT);

  attachInterrupt(digitalPinToInterrupt(pinButton1), readStateButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(pinButton2), readStateButton, FALLING);

  // Define the radio communication
  radio.begin();
  //radio.enableDynamicPayloads();
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_MIN);
  radio.setChannel(125);
  //radio.setRetries(15, 15);
  radio.openWritingPipe(addresses[0]); // 00001
  radio.openReadingPipe(1, addresses[1]); // 00002
  radio.setAutoAck(true);
  radio.startListening();

  if (dateTime.lostPower()) {
    Serial.println("RTC lost power, let's set the time!");
    dateTime.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  //mq2.begin();

  screen.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
  screen.setTextColor(WHITE);
  screen.print("Initialisation...");
  screen.display();
  delay(2000); // Pause for 2 seconds

  for (int l = 0; l < 5; l++) {
    digitalWrite(pinLedGreen, HIGH);
    digitalWrite(pinLedRed, HIGH);

    delay(250);

    digitalWrite(pinLedGreen, LOW);
    digitalWrite(pinLedRed, LOW);

    delay(250);
  }
}

void loop() {

  drawInTemperatureBitmap();
  delay(3000);

  drawInHumidityBitmap();
  delay(3000);

  drawInGasBitmap();
  delay(3000);

  if (radio.available()) {
    radio.read(&data, sizeof(Weather_Station));
    Serial.println(data.temperatureOutdoor);
    Serial.println(data.humidityOutdoor);
    Serial.println(data.rainIntensity);
    Serial.println(data.intensityLightOutdoor);
    Serial.println(data.uvIndexOutdoor);
    Serial.println(data.pressureAtmoOutdoor);
    Serial.println(data.intensityLightOutdoor);
    Serial.println(data.uvIndexOutdoor);

    for (int l = 0; l < 4; l++) {
      digitalWrite(pinLedReceivedData, HIGH);
      delay(125);
      digitalWrite(pinLedReceivedData, LOW);
      delay(125);
    }
  }

  drawOutTemperatureBitmap();
  delay(3000);

  drawOutHumidityBitmap();
  delay(3000);

  drawOutRainIntensityBitmap();
  delay(3000);

  drawOutIntensityLightBitmap();
  delay(3000);

  drawOutUvIndexBitmap();
  delay(3000);

  drawOutAirQualityBitmap();
  delay(3000);

  drawOutPressureAtmoBitmap();
  delay(3000);

  drawOutWindBitmap();
  delay(3000);

  drawOutWindDirectionBitmap();
  delay(3000);
}

/**Module Station Indoor**/

//lecture de l'état du boutton
void readStateButton() {
  if (!digitalRead(pinButton1)) { //lors de l'appui du bouton pour enregistrer un nouveau badge

    //while (!digitalRead(pinButton)) {} //anti redéclenchement si on reste appuyé
    delay(50);
    if (buttonPress == 0) {
      buttonPress++;
    } else if (buttonPress == 1) {
      buttonPress++;
    } else {
      buttonPress = 0;
    }
  }
}

//definition heure / date et affichage ecran oled
void setDateTime() {
  screen.clearDisplay();

  now = dateTime.now();

  screen.setTextSize(1);
  //screen.setTextColor(WHITE);
  //screen.setFont();
  screen.setCursor(screen.width() / 9, 0);

  screen.print(daysOfTheWeek[now.dayOfTheWeek()]);
  screen.print(' ');
  screen.print(now.day(), DEC);
  screen.print('/');
  if (now.month() < 10) {
    screen.print('0');
  }
  screen.print(now.month(), DEC);
  screen.print('/');
  screen.print(now.year(), DEC);

  screen.setTextSize(3);
  screen.setCursor(screen.width() / 7, screen.height() / 2);

  screen.print(now.hour(), DEC);
  screen.print(':');
  if (now.minute() < 10) {
    screen.print('0');
  }
  screen.print(now.minute(), DEC);

  screen.display();
}

//affichage indoor
void drawIndoor(const uint8_t *bitmap) {

  screen.clearDisplay(); //for Clearing the display

  screen.setTextSize(2);
  screen.setCursor(screen.width() / 6, 0);

  screen.println("INDOOR");
  screen.drawBitmap(0, (screen.height() - sizeBitmap), bitmap, sizeBitmap, sizeBitmap, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)

  screen.setTextSize(2);
  screen.setCursor(screen.width() / 2, screen.height() / 2);
}

//lecture du capteur DHT22 interieur
void readDht22SensorIndoor() {
  readDHT22 = DHT.read22(pinSensorDTH22); // Reads the data from the sensor
}

//defintition de la temperature interieur
void setTemperatureIndoor() {
  readDht22SensorIndoor();

  temperatureIndoor = DHT.temperature; // Gets the values of the temperature
  inTemp = String(temperatureIndoor) + char(247) + "C";
}

//affichage de la température interieur
void drawInTemperatureBitmap() {
  drawIndoor(temperatureBitmap);

  setTemperatureIndoor();

  screen.print(inTemp);
  screen.display();
}

//defintition de l'humidité interieur
void setHumidityIndoor() {
  readDht22SensorIndoor();

  humidityIndoor = DHT.humidity; // Gets the values of the humidity
  inHum = String(humidityIndoor) + char(37);
}

//affichage de l'humidité interieur
void drawInHumidityBitmap() {
  drawIndoor(humidityBitmap);

  setHumidityIndoor();

  screen.print(inHum);
  screen.display();
}

void readSensorMq2() {
  /*float* gasIndoor = mq2.read(true); //set it false if you don't want to print the values in the Serial

      //lpg = values[0];
      lpg = mq2.readLPG();
      //co = values[1];
      co = mq2.readCO();
      //smoke = values[2];
      smoke = mq2.readSmoke();*/

  /*Serial.print("LPG:");
    Serial.println(lpg);
    Serial.print(" CO:");
    Serial.println(co);
    Serial.print("SMOKE:");
    Serial.print(smoke);
    Serial.println(" PPM");*/

  //inGas = String(lpg);
}

void setGasIndoor() {
  readSensorMq2();
  // inGas = String(lpg);
}

void drawInGasBitmap() {
  drawIndoor(gasBitmap);

  setGasIndoor();

  screen.print(inGas);
  screen.display();
}

/**Module Station Outdoor**/
//affichage outdoor
void drawOutdoor(const uint8_t *bitmap) {
  screen.clearDisplay(); //for Clearing the display

  screen.setTextSize(2);
  screen.setCursor(screen.width() / 6, 0);

  screen.println("OUTDOOR");

  screen.drawBitmap(0, (screen.height() - sizeBitmap), bitmap, sizeBitmap, sizeBitmap, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)

  screen.setTextSize(2);
  screen.setCursor(screen.width() / 2, screen.height() / 2);
}

//récupération de la température exterieur
void getTemperatureOutdoor() {
  temperatureOutdoor =  data.temperatureOutdoor;
  outTemp = String(temperatureOutdoor) + " " + char(247) + 'C';
}

//affichage de la température exterieur
void drawOutTemperatureBitmap() {
  drawOutdoor(temperatureBitmap);

  getTemperatureOutdoor();

  screen.print(outTemp);
  screen.display();
}

//récupération de l'humidité exterieur
void getHumidityOutdoor() {
  humidityOutdoor = data.humidityOutdoor;
  outHum = String(humidityOutdoor) + " " + char(37);
}

//affichage de l'humidité exterieur
void drawOutHumidityBitmap() {
  drawOutdoor(humidityBitmap);

  getHumidityOutdoor();

  screen.print(outHum);
  screen.display();
}

//récupération de l'intensité de la pluie exterieur
void getRainIntensityOutdoor() {
  rainIntensity = data.rainIntensity;
  outRain = String(rainIntensity);
}

//affichage de l'intensite de la pluie exterieur
void drawOutRainIntensityBitmap() {
  drawOutdoor(rainBitmap);

  getRainIntensityOutdoor();

  screen.print(outRain);
  screen.display();
}

//récupération de lintensité lumineuse exterieur
void getIntensityLightOutdoor() {
  intensityLightOutdoor = data.intensityLightOutdoor;
  outLight = String(intensityLightOutdoor) + " lux";
}

//affichage de la intensité lumineuse exterieur
void drawOutIntensityLightBitmap() {
  drawOutdoor(lightBitmap);

  getIntensityLightOutdoor();

  screen.print(outLight);
  screen.display();
}

//récupération de l'indice UV exterieur
void getUvIndexOutddor() {
  uvIndexOutdoor = data.uvIndexOutdoor;
  outUv = String(uvIndexOutdoor);
}

//affichage de l'indice uv exterieur
void drawOutUvIndexBitmap() {
  drawOutdoor(uvBitmap);

  getUvIndexOutddor();

  screen.println(outUv);

  screen.setTextSize(1);

  if (uvIndexOutdoor <= 2) {
    screen.setCursor(52, 54);
    screen.print("Faible");
  } else if (uvIndexOutdoor > 2 && uvIndexOutdoor <= 5) {
    screen.setCursor(54, 54);
    screen.print("Moyen");
  } else if (uvIndexOutdoor > 5 && uvIndexOutdoor <= 7) {
    screen.setCursor(53, 54);
    screen.print("Eleve");
  } else if (uvIndexOutdoor > 7 && uvIndexOutdoor <= 10) {
    screen.setCursor(44, 54);
    screen.print("Tres Eleve");
  } else if (uvIndexOutdoor >= 11) {
    screen.setCursor(55, 54);
    screen.print("Extreme");
  }

  screen.display();
}

//récupération de qualité air exterieur
void getAirQualityOutdoor() {
  airQualityOutdoor = data.airQualityOutdoor;
  outAir = String(airQualityOutdoor) + " ppm";
}

//affichage de la qualite de l'air exterieur
void drawOutAirQualityBitmap() {
  drawOutdoor(airQaualityBitmap);

  getAirQualityOutdoor();

  screen.print(outAir);
  screen.display();
}

//récupération de la pression atmosphèrique exterieur
void getPressureAtmoOutdoor() {
  pressureAtmoOutdoor = data.pressureAtmoOutdoor;
  outPressure = String(pressureAtmoOutdoor) + " hPa";
}

//affichage de la pression atmosphèrique exterieur
void drawOutPressureAtmoBitmap() {
  drawOutdoor(pressureAtmoBitmap);

  getPressureAtmoOutdoor();

  screen.print(outPressure);
  screen.display();
}


//récupération de la direction du vent
void getWindDirectionOutdoor() {
  windDirectionOutdoor = data.windDirectionOutdoor;

  if (windDirectionOutdoor == windValueDirection[0]) {
    Serial.println(windDirectionOutdoor);
    outWindDir = windDirection[0];
  } else if (windDirectionOutdoor == windValueDirection[1]) {
    Serial.println(windDirection[1]);
    outWindDir = windDirection[1];
  } else if (windDirectionOutdoor == windValueDirection[2]) {
    Serial.println(windDirection[2]);
    outWindDir = windDirection[2];
  } else if (windDirectionOutdoor == windValueDirection[3]) {
    Serial.println(windDirection[3]);
    outWindDir = windDirection[3];
  } else if (windDirectionOutdoor == windValueDirection[4]) {
    Serial.println(windDirection[4]);
    outWindDir = windDirection[4];
  } else if (windDirectionOutdoor == windValueDirection[5]) {
    Serial.println(windDirection[5]);
    outWindDir = windDirection[5];
  } else if (windDirectionOutdoor == windValueDirection[6]) {
    Serial.println(windDirection[6]);
    outWindDir = windDirection[6];
  } else if (windDirectionOutdoor == windValueDirection[7]) {
    Serial.println(windDirection[7]);
    outWindDir = windDirection[7];
  } else {
    Serial.println("other");
  }
}

//affichage de la direction du vent exterieur
void drawOutWindDirectionBitmap() {
  drawOutdoor(windBitmap);

  getWindDirectionOutdoor();

  screen.print(outWindDir);
  screen.display();
}


//récupération de la vitesse du vent
void getWindSpeedOutdoor() {
  windSpeedOutdoor = data.windSpeedOutdoor;
  outWindSpeed =  String(windSpeedOutdoor) + "km" + char(47) + "h";
}

//affichage de la vitesse du vent
void drawOutWindBitmap() {
  drawOutdoor(windBitmap);

  getWindSpeedOutdoor();

  screen.print(outWindSpeed);
  screen.display();
}