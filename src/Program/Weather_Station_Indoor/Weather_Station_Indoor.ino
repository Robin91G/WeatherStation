#include <Wire.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <RTClib.h>
#include "dht.h"
#include <MQ2.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

//Definition Digital Pin
#define pinButton1 2
#define pinButton2 3
#define pinLedReceivedData 4
#define pinLedRed 5
#define pinLedGreen 6
#define pin_radio_CE 7
#define pin_radio_CSN 8
#define pinSensorDTH22 9
#define pinBuzzer 10
#define pinButtonOledReset 14 //A0
#define pinDigitalSensorMq2  15 //A1

//Definition Analog Pin
#define pinSensorMq2 A2

RF24 radio(pin_radio_CE, pin_radio_CSN);
Adafruit_SSD1306 screen(128, 64, &Wire, pinButtonOledReset);

const byte addresses [] [6] = {"00001", "00002"};

//structure of data
struct Weather_Station {
  int temperatureOutdoor;
  int humidityOutdoor;
  int rainIntensity;
  int intensityLightOutdoor;
  int uvIndexOutdoor;
  int pressureAtmoOutdoor;
  int altitudeOutdoor;
  int airQualityOutdoor;
  int windDirectionOutdoor;
  int windSpeedOutdoor;
};
Weather_Station data; //Create a variable with the above structure

const int windValueDirection [8] = {753, 79, 253, 931, 418, 160, 589, 866};
const String windDirection [8] = {"N", "E", "S", "W", "NE", "SE", "SW", "NW"};

int readDHT22, temperatureIndoor, humidityIndoor, temperatureOutdoor, humidityOutdoor, rainIntensity, intensityLightOutdoor, uvIndexOutdoor, airQualityOutdoor, pressureAtmoOutdoor, windDirectionOutdoor, windSpeedOutdoor;
String inTemp, inHum, inGas, outTemp, outHum, outRain, outLight, outUv, outPressure, outAir, outWindDir, outWindSpeed;

//taille Bitmap
const int sizeBitmap = 40;
const int sizeBitmapMini = 40;

//difinition image bitmap temperature
static const unsigned char temperatureBitmap [] PROGMEM = {
  0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x00, 0x00, 0x00,
  0x06, 0x06, 0x3c, 0x00, 0x00, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x0c, 0x46, 0x00, 0x00, 0x00, 0x0c,
  0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x78, 0x00, 0x00, 0x0c, 0x66,
  0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x18,
  0x00, 0x00, 0x0c, 0x66, 0x7e, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00,
  0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x78, 0x00, 0x00, 0x0c, 0x66, 0x78, 0x00, 0x00,
  0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x0c,
  0x66, 0x7c, 0x00, 0x00, 0x0c, 0x66, 0x3c, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x00, 0x1c, 0x63,
  0x00, 0x00, 0x00, 0x18, 0x61, 0x80, 0x00, 0x00, 0x30, 0xe0, 0x80, 0x00, 0x00, 0x21, 0xf0, 0xc0,
  0x00, 0x00, 0x63, 0xf8, 0xc0, 0x00, 0x00, 0x63, 0xf8, 0x40, 0x00, 0x00, 0x63, 0xf8, 0x40, 0x00,
  0x00, 0x63, 0xf8, 0x40, 0x00, 0x00, 0x63, 0xf8, 0xc0, 0x00, 0x00, 0x21, 0xf0, 0xc0, 0x00, 0x00,
  0x30, 0x01, 0x80, 0x00, 0x00, 0x18, 0x03, 0x80, 0x00, 0x00, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x9e, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00
};

//difinition image bitmap humidité
static const unsigned char humidityBitmap [] PROGMEM = {
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x20,
  0xc3, 0x00, 0x00, 0x00, 0x70, 0x83, 0x00, 0x00, 0x00, 0x79, 0x81, 0x00, 0x00, 0x00, 0xd9, 0x01,
  0x80, 0x00, 0x00, 0x8f, 0x00, 0x80, 0x00, 0x01, 0x87, 0x00, 0xc0, 0x00, 0x01, 0x06, 0x00, 0x40,
  0x00, 0x03, 0x06, 0x00, 0x60, 0x00, 0x02, 0x04, 0x00, 0x20, 0x00, 0x06, 0x0c, 0x00, 0x30, 0x00,
  0x04, 0x08, 0x00, 0x18, 0x00, 0x0c, 0x18, 0x00, 0x18, 0x00, 0x0c, 0x10, 0x00, 0x0c, 0x00, 0x0c,
  0x30, 0x00, 0x04, 0x00, 0x0c, 0x20, 0x00, 0x04, 0x00, 0x04, 0x20, 0x00, 0x02, 0x00, 0x06, 0x60,
  0x00, 0x02, 0x00, 0x03, 0xc0, 0x00, 0x03, 0x00, 0x01, 0xc0, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00,
  0x01, 0x00, 0x00, 0xc0, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x80, 0x00, 0x80, 0x00, 0x09,
  0x80, 0x00, 0xc0, 0x00, 0x09, 0x00, 0x00, 0xc0, 0x00, 0x19, 0x00, 0x00, 0x40, 0x00, 0x33, 0x00,
  0x00, 0x40, 0x00, 0x62, 0x00, 0x00, 0x60, 0x00, 0xc6, 0x00, 0x00, 0x30, 0x00, 0x84, 0x00, 0x00,
  0x18, 0x00, 0x0c, 0x40, 0x00, 0x0c, 0x00, 0x38, 0x00, 0x00, 0x06, 0x00, 0x60, 0x00, 0x00, 0x03,
  0xc3, 0xc0, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00
};


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);

  Wire.begin();

  pinMode(pinButton1, INPUT);
  pinMode(pinButton2, INPUT);
  pinMode(pinLedReceivedData, OUTPUT);
  pinMode(pinLedRed, OUTPUT);
  pinMode(pinLedGreen, OUTPUT);
  pinMode(pinSensorDTH22, INPUT);
  pinMode(pinBuzzer, OUTPUT);
  pinMode(pinDigitalSensorMq2, INPUT);

  attachInterrupt(digitalPinToInterrupt(pinButton1), readStateButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(pinButton2), readStateButton, FALLING);

  // Define the radio communication
  radio.begin();
  //radio.enableDynamicPayloads();
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_MIN);
  radio.setChannel(125);
  //radio.setRetries(15, 15);
  radio.openWritingPipe(addresses[0]); // 00001
  radio.openReadingPipe(1, addresses[1]); // 00002
  radio.setAutoAck(true);
  radio.startListening();

  screen.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
  screen.setTextColor(WHITE);
  screen.print("Initialisation...");
  screen.display();
  delay(2000); // Pause for 2 seconds

}

void loop() {
  // put your main code here, to run repeatedly:
 drawInTemperatureBitmap();
 drawInHumidityBitmap();

}

//affichage indoor
void drawIndoor(const uint8_t *bitmap) {

  screen.clearDisplay(); //for Clearing the display

  screen.setTextSize(2);
  screen.setCursor(screen.width() / 6, 0);

  screen.println("INDOOR");
  screen.drawBitmap(0, (screen.height() - sizeBitmap), bitmap, sizeBitmap, sizeBitmap, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)

  screen.setTextSize(2);
  screen.setCursor(screen.width() / 2, screen.height() / 2);
}

//lecture du capteur DHT22 interieur
void readDht22SensorIndoor() {
  readDHT22 = DHT.read22(pinSensorDTH22); // Reads the data from the sensor
}

//defintition de la temperature interieur
void setTemperatureIndoor() {
  readDht22SensorIndoor();

  temperatureIndoor = DHT.temperature; // Gets the values of the temperature
  inTemp = String(temperatureIndoor) + char(247) + "C";
}

//affichage de la température interieur
void drawInTemperatureBitmap() {
  drawIndoor(temperatureBitmap);

  setTemperatureIndoor();

  screen.print(inTemp);
  screen.display();
}

//defintition de l'humidité interieur
void setHumidityIndoor() {
  readDht22SensorIndoor();

  humidityIndoor = DHT.humidity; // Gets the values of the humidity
  inHum = String(humidityIndoor) + char(37);
}

//affichage de l'humidité interieur
void drawInHumidityBitmap() {
  drawIndoor(humidityBitmap);

  setHumidityIndoor();

  screen.print(inHum);
  screen.display();
}